{"ast":null,"code":"import _regeneratorRuntime from \"I:\\\\node_projects\\\\bmzn\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"I:\\\\node_projects\\\\bmzn\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"I:\\\\node_projects\\\\bmzn\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"I:\\\\node_projects\\\\bmzn\\\\frontend\\\\src\\\\MapScreen.js\";\n\nimport axios from 'axios';\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Store } from './Store';\nimport { LoadScript, GoogleMap, StandaloneSearchBox, Marker } from '@react-google-maps/api';\nimport { toast } from 'react-toastify';\nimport Button from 'react-bootstrap/Button';\nvar defaultLocation = {\n  lat: 45.516,\n  lng: -73.56\n};\nvar libs = ['places'];\n\nvar MapScreen = function MapScreen() {\n  var _useContext = useContext(Store),\n      state = _useContext.state,\n      ctxDispatch = _useContext.dispatch;\n\n  var userInfo = state.userInfo;\n  var navigate = useNavigate();\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      googleApiKey = _useState2[0],\n      setGoogleApiKey = _useState2[1];\n\n  var _useState3 = useState(defaultLocation),\n      _useState4 = _slicedToArray(_useState3, 2),\n      center = _useState4[0],\n      setCenter = _useState4[1];\n\n  var _useState5 = useState(center),\n      _useState6 = _slicedToArray(_useState5, 2),\n      location = _useState6[0],\n      setLocation = _useState6[1];\n\n  var mapRef = useRef(null);\n  var placeRef = useRef(null);\n  var markerRef = useRef(null);\n\n  var getUserCurrentLocation = function getUserCurrentLocation() {\n    if (!navigator.geolocation) {\n      alert('Geolocation is not supported by this browser');\n    } else {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        setCenter({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n        setLocation({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n      });\n    }\n  };\n\n  useEffect(function () {\n    var fetch = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _yield$axios, data;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return axios('/api/keys/google', {\n                  headers: {\n                    Authorization: \"Bearer \".concat(userInfo.token)\n                  }\n                });\n\n              case 2:\n                _yield$axios = _context.sent;\n                data = _yield$axios.data;\n                setGoogleApiKey(data.key);\n                getUserCurrentLocation();\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function fetch() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    ctxDispatch({\n      type: 'SET_FULLBOX_ON'\n    });\n  }, [ctxDispatch]);\n\n  var onLoad = function onLoad(map) {\n    mapRef.current = map;\n  };\n\n  var onIdle = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setLocation({\n                lat: mapRef.current.center.lat(),\n                lng: mapRef.current.center.lng()\n              });\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function onIdle() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var onLoadPlaces = function onLoadPlaces(place) {\n    placeRef.current = place;\n  };\n\n  var onPlacesChanged = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var place;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              place = placeRef.current.getPlaces()[0].geometry.location;\n              setCenter({\n                lat: place.lat(),\n                lng: place.lng()\n              });\n              setLocation({\n                lat: place.lat(),\n                lng: place.lng()\n              });\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function onPlacesChanged() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var onMarkerLoad = function onMarkerLoad(marker) {\n    markerRef.current = marker;\n  };\n\n  var onConfirm = function onConfirm() {\n    var places = placeRef.current.getPlaces() || [{}];\n    ctxDispatch({\n      type: 'SAVE_SHIPPING_ADDRESS_MAP_LOCATION',\n      payload: {\n        lat: location.lat,\n        lng: location.lng,\n        address: places[0].formatted_address,\n        name: places[0].name,\n        vicinity: places[0].vicinity,\n        googleAddressId: places[0].id\n      }\n    });\n    toast.success('location selected successfully.');\n    navigate('/shipping');\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"full-box\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(LoadScript, {\n    libraries: libs,\n    googleMapsApiKey: googleApiKey,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(GoogleMap, {\n    id: \"smaple-map\",\n    mapContainerStyle: {\n      height: '100%',\n      width: '100%'\n    },\n    center: center,\n    zoom: 15,\n    onLoad: onLoad,\n    onIdle: onIdle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(StandaloneSearchBox, {\n    onLoad: onLoadPlaces,\n    onPlacesChanged: onPlacesChanged,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map-input-box\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Enter your address\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    onClick: onConfirm,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 15\n    }\n  }, \"Confirm\"))), /*#__PURE__*/React.createElement(Marker, {\n    position: location,\n    onLoad: onMarkerLoad,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default MapScreen;","map":{"version":3,"sources":["I:/node_projects/bmzn/frontend/src/MapScreen.js"],"names":["axios","React","useContext","useEffect","useRef","useState","useNavigate","Store","LoadScript","GoogleMap","StandaloneSearchBox","Marker","toast","Button","defaultLocation","lat","lng","libs","MapScreen","state","ctxDispatch","dispatch","userInfo","navigate","googleApiKey","setGoogleApiKey","center","setCenter","location","setLocation","mapRef","placeRef","markerRef","getUserCurrentLocation","navigator","geolocation","alert","getCurrentPosition","position","coords","latitude","longitude","fetch","headers","Authorization","token","data","key","type","onLoad","map","current","onIdle","onLoadPlaces","place","onPlacesChanged","getPlaces","geometry","onMarkerLoad","marker","onConfirm","places","payload","address","formatted_address","name","vicinity","googleAddressId","id","success","height","width"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport React, { useContext, useEffect, useRef, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Store } from './Store';\r\nimport {\r\n  LoadScript,\r\n  GoogleMap,\r\n  StandaloneSearchBox,\r\n  Marker,\r\n} from '@react-google-maps/api';\r\nimport { toast } from 'react-toastify';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst defaultLocation = { lat: 45.516, lng: -73.56 };\r\nconst libs = ['places'];\r\n\r\nconst MapScreen = () => {\r\n  const { state, dispatch: ctxDispatch } = useContext(Store);\r\n  const { userInfo } = state;\r\n  const navigate = useNavigate();\r\n  const [googleApiKey, setGoogleApiKey] = useState('');\r\n  const [center, setCenter] = useState(defaultLocation);\r\n  const [location, setLocation] = useState(center);\r\n\r\n  const mapRef = useRef(null);\r\n  const placeRef = useRef(null);\r\n  const markerRef = useRef(null);\r\n\r\n  const getUserCurrentLocation = () => {\r\n    if (!navigator.geolocation) {\r\n      alert('Geolocation is not supported by this browser');\r\n    } else {\r\n      navigator.geolocation.getCurrentPosition((position) => {\r\n        setCenter({\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude,\r\n        });\r\n        setLocation({\r\n          lat: position.coords.latitude,\r\n          lng: position.coords.longitude,\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      const { data } = await axios('/api/keys/google', {\r\n        headers: { Authorization: `Bearer ${userInfo.token}` },\r\n      });\r\n      setGoogleApiKey(data.key);\r\n      getUserCurrentLocation();\r\n    };\r\n\r\n    ctxDispatch({\r\n      type: 'SET_FULLBOX_ON',\r\n    });\r\n  }, [ctxDispatch]);\r\n\r\n  const onLoad = (map) => {\r\n    mapRef.current = map;\r\n  };\r\n  const onIdle = async () => {\r\n    setLocation({\r\n      lat: mapRef.current.center.lat(),\r\n      lng: mapRef.current.center.lng(),\r\n    });\r\n  };\r\n  const onLoadPlaces = (place) => {\r\n    placeRef.current = place;\r\n  };\r\n  const onPlacesChanged = async () => {\r\n    const place = placeRef.current.getPlaces()[0].geometry.location;\r\n    setCenter({ lat: place.lat(), lng: place.lng() });\r\n    setLocation({\r\n      lat: place.lat(),\r\n      lng: place.lng(),\r\n    });\r\n  };\r\n  const onMarkerLoad = (marker) => {\r\n    markerRef.current = marker;\r\n  };\r\n\r\n  const onConfirm = () => {\r\n    const places = placeRef.current.getPlaces() || [{}];\r\n    ctxDispatch({\r\n      type: 'SAVE_SHIPPING_ADDRESS_MAP_LOCATION',\r\n      payload: {\r\n        lat: location.lat,\r\n        lng: location.lng,\r\n        address: places[0].formatted_address,\r\n        name: places[0].name,\r\n        vicinity: places[0].vicinity,\r\n        googleAddressId: places[0].id,\r\n      },\r\n    });\r\n    toast.success('location selected successfully.');\r\n    navigate('/shipping');\r\n  };\r\n\r\n  return (\r\n    <div className=\"full-box\">\r\n      <LoadScript libraries={libs} googleMapsApiKey={googleApiKey}>\r\n        <GoogleMap\r\n          id=\"smaple-map\"\r\n          mapContainerStyle={{ height: '100%', width: '100%' }}\r\n          center={center}\r\n          zoom={15}\r\n          onLoad={onLoad}\r\n          onIdle={onIdle}\r\n        >\r\n          <StandaloneSearchBox\r\n            onLoad={onLoadPlaces}\r\n            onPlacesChanged={onPlacesChanged}\r\n          >\r\n            <div className=\"map-input-box\">\r\n              <input type=\"text\" placeholder=\"Enter your address\"></input>\r\n              <Button type=\"button\" onClick={onConfirm}>\r\n                Confirm\r\n              </Button>\r\n            </div>\r\n          </StandaloneSearchBox>\r\n          <Marker position={location} onLoad={onMarkerLoad}></Marker>\r\n        </GoogleMap>\r\n      </LoadScript>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapScreen;\r\n"]},"metadata":{},"sourceType":"module"}